import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()
%matplotlib inline

df = pd.read_csv('/content/fraudTrain.csv')
print(df.shape)
df.head()
df.info()
df.describe()
obj = (df.dtypes == 'object')
object_cols = list(obj[obj].index)
print("Categorical variables:", len(object_cols))

int_ = (df.dtypes == 'int')
num_cols = list(int_[int_].index)
print("Integer variables:", len(num_cols))

fl = (df.dtypes == 'float')
fl_cols = list(fl[fl].index)
print("Float variables:", len(fl_cols))
fraud_column = 'long'  # Replace this with the actual column name if it's different

# Count the number of fraud cases
fraud_count = df[fraud_column].sum()

print(f"Number of fraud cases: {fraud_count}")
print("Amount details of the fraudulent transaction")
df['amt'].describe() # Access the 'Amount' column in the DataFrame and call describe()
print("details of valid transaction")

# Assuming 'df' is your DataFrame and you want to filter for valid transactions
# Replace 'fraud_column' with the name of your column indicating fraud status
valid = df[df['amt'] == 0]

valid['amt'].describe()
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Load your dataset (replace 'credit_card_data.csv' with the path to your dataset)
df = pd.read_csv('/content/fraudTest.csv')

# Select only numeric columns for correlation calculation
numeric_df = df.select_dtypes(include=['number'])

# Generate the correlation matrix
correlation_matrix = numeric_df.corr()

# Display the correlation matrix
print("Correlation Matrix:")
print(correlation_matrix)

# Optionally, visualize the correlation matrix using a heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm')
plt.title("Correlation Matrix Heatmap")
plt.show()
# dividing the X and the Y from the dataset
X = data.drop(['Class'], axis = 1)
Y = data["Class"]
print(X.shape)
print(Y.shape)
# getting just the values for the sake of processing
# (its a numpy array with no columns)
xData = X.values
yData = Y.values
